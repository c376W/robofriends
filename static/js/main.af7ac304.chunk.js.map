{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,EAfF,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAEzB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAM,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,eACvBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcOS,EApBE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OAClB,OACCR,EAAAC,EAAAC,cAAA,WAEEM,EAAOC,IAAI,SAACC,EAAKC,GAChB,OACCX,EAAAC,EAAAC,cAACU,EAAD,CACCC,IAAKF,EACLZ,GAAIW,EAAKX,GACTF,KAAMa,EAAKb,KACXC,MAAOY,EAAKZ,UARjB,MCQagB,EAXG,SAAAlB,GAAgCA,EAA9BmB,YAA8B,IAAlBC,EAAkBpB,EAAlBoB,aAC/B,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACjBc,KAAK,SACLC,YAAY,iBACZC,SAAYH,MC8CAI,qBA5Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBDI,eAAe,SAACC,GACfR,EAAKS,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAhBxCX,EAAKY,MAAQ,CAEZzB,OAAO,GACPO,YAAa,IALFM,mFASM,IAAAa,EAAAV,KAClBW,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SAC3EF,KAAK,SAAAG,GAAK,OAAEL,EAAKJ,SAAS,CAACtB,OAAO+B,uCAU5B,IAAAC,EACyBhB,KAAKS,MAA7BzB,EADDgC,EACChC,OAAQO,EADTyB,EACSzB,YACV0B,EAAiBjC,EAAOkC,OAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS9B,EAAY6B,iBAEpD,OAAQpC,EAAOsC,OAIf9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,iBACAH,EAAAC,EAAAC,cAAC6C,EAAD,CAAW/B,aAAcQ,KAAKI,iBAG5B5B,EAAAC,EAAAC,cAAC8C,EAAD,CAAUxC,OAAQiC,KARtBzC,EAAAC,EAAAC,cAAA,4BA5Be+C,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.af7ac304.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id})=>{\r\n\t//const {name,email,id} = props; the parameter is props\r\n\treturn(\r\n\t\t<div className='tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt = 'robots' src={`https://robohash.org/${id}?set=set4`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={user.id} \r\n\t\t\t\t\t\t\tname={user.name} \r\n\t\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t); \r\n\t})\r\n\t\t\t};\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search kitties' \r\n\t\t\tonChange = {searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import Scroll from '../components/Scroll';\r\n// import {robots} from './robots';\r\n// import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n//Testing if this is the robo app\r\n//Would like to change the color.\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t// robots: robots,\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots:users}))\r\n\t\t//// this.setState({robots:robots});\r\n\t\t//// console.log('check');\r\n\t}\r\n\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t  return !robots.length ?\r\n\t\t\t<h1>Loading</h1> :\r\n\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='title-size'>KittieFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t{/* <Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry> */}\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t{/* </ErrorBoundry>\r\n\t\t\t\t\t</Scroll> */}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\t\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}